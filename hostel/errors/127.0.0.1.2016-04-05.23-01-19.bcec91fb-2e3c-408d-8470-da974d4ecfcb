(dp1
S'output'
p2
S"<class 'sqlite3.IntegrityError'> FOREIGN KEY constraint failed"
p3
sS'layer'
p4
S'/home/ramarohit/web2py/applications/test/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\n@auth.requires_login()\ndef login():\n    if auth.has_membership(\'moderator\'):\n        redirect(URL(\'default\',\'moderate\'))\n    if auth.has_membership(\'solver\'):\n        redirect(URL(\'default\',\'solve\'))\n    query = (db.auth_event.description.like(\'%Logged-in%\'))&(db.auth_event.user_id==auth.user.id) \n    if db(query).count() == 1:\n        redirect(URL(\'default\',\'profile\'))\n    else :\n        redirect(URL(\'default\',\'home\'))\n    return\ndef manage():\n    grid=SQLFORM.grid(db.auth_user)\n    return locals()\n@auth.requires(login)\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello")\n    return dict(message=T(\'Welcome to hostel management portal!\'))\n\ndef home():\n    response.flash = T("Hello")\n    return dict(message=T(\'Welcome to hostel management portal!\'))\n\ndef profile():\n    form=auth.register()\n    return locals\n\ndef electricals():\n    db.electrical.status.writable=False\n    db.electrical.status.readable=False\n    db.electrical.progress.writable=False\n    db.electrical.progress.readable=False\n    form=SQLFORM(db.electrical).process()\n    return locals()\n\ndef viewelectrical():\n    rows=db(db.electrical.iden==auth.user.id).select(orderby=~db.electrical.created_on)\n    return locals()\n\ndef viewwater():\n    rows=db(db.water.iden==auth.user.id).select(orderby=~db.water.created_on)\n    return locals()\n\ndef viewwash():\n    rows=db(db.washingmachine.iden==auth.user.id).select(orderby=~db.washingmachine.created_on)\n    return locals()\n\ndef viewother():\n    rows=db(db.other.iden==auth.user.id).select(orderby=~db.other.created_on)\n    return locals()\n\ndef waters():\n    db.water.status.writable=False\n    db.water.status.readable=False\n    db.water.progress.writable=False\n    db.water.progress.readable=False\n    form=SQLFORM(db.water).process()\n    return dict(form=form)\ndef washingmachines():\n    db.washingmachine.status.writable=False\n    db.washingmachine.status.readable=False\n    db.washingmachine.progress.writable=False\n    db.washingmachine.progress.readable=False\n    form=SQLFORM(db.washingmachine).process()\n    return locals()\ndef others():\n    db.other.status.writable=False\n    db.other.status.readable=False\n    db.other.progress.writable=False\n    db.other.progress.readable=False\n    form=SQLFORM(db.other).process()\n    return locals()\ndef problem():\n    return locals()\ndef viewproblem():\n    return locals()\n\n@auth.requires_membership("moderator")\ndef moderate():\n    return locals()\n\n\ndef options_widget(field,value,**kwargs):\n    """ Use web2py\'s intelligence to set up the right HTML for the select field\n     the widgets knows about the database model """\n    w = SQLFORM.widgets.options.widget\n    xml = w(field,value,**kwargs)\n    return xml\n\ndef options_widget(field,value,**kwargs):\n    return SQLFORM.widgets.options.widget(field,value,**kwargs)\n\ndef editable_grid():\n    #process submitted form\n    if len(request.post_vars) > 0:\n        for key, value in request.post_vars.iteritems():   \n            (field_name,sep,row_id) = key.partition(\'_row_\') #name looks like home_state_row_99\n            if row_id:\n                db(db.electrical).update(**{field_name:value})\n    db.electrical.status.represent = lambda value,row:  options_widget(db.electrical.status,value,\n                     **{\'_name\':\'status_row_%s\' % row.id})\n    grid = SQLFORM.grid(db.electrical.status!=\'approved\',orderby=~db.electrical.created_on,create=False,details=False,editable=False,selectable= lambda ids : redirect(URL(\'default\',\'editable_grid\',vars=request._get_vars)))\n    grid.elements(_type=\'checkbox\',_name=\'records\',replace=None)\n    return dict(grid=grid)\n\n@auth.requires_membership("moderator")\ndef moderate_electrical():\n    #process submitted form\n    if len(request.post_vars) > 0:\n        for key, value in request.post_vars.iteritems():   \n            (field_name,sep,row_id) = key.partition(\'_row_\') #name looks like home_state_row_99\n            if row_id:\n                db(db.electrical).update(**{field_name:value})\n    db.electrical.status.represent = lambda value,row:  options_widget(db.electrical.status,value,\n                     **{\'_name\':\'status_row_%s\' % row.id})\n    grid = SQLFORM.grid(db.electrical.status!=\'approved\',orderby=~db.electrical.created_on,create=False,editable=False,selectable= lambda ids : redirect(URL(\'default\',\'editable_grid\',vars=request._get_vars)))\n    grid.elements(_type=\'checkbox\',_name=\'records\',replace=None)\n    return dict(grid=grid)\n@auth.requires_membership("moderator")\ndef moderate_plumbing():\n    if len(request.post_vars) > 0:\n        for key, value in request.post_vars.iteritems():   \n            (field_name,sep,row_id) = key.partition(\'_row_\') #name looks like home_state_row_99\n            if row_id:\n                db(db.electrical).update(**{field_name:value})\n    db.water.status.represent = lambda value,row:  options_widget(db.water.status,value,\n                     **{\'_name\':\'status_row_%s\' % row.id})\n    grid = SQLFORM.grid(db.water.status!=\'approved\',orderby=~db.water.created_on,create=False,editable=False,selectable= lambda ids : redirect(URL(\'default\',\'editable_grid\',vars=request._get_vars)))\n    grid.elements(_type=\'checkbox\',_name=\'records\',replace=None)\n    return dict(grid=grid)\n\n@auth.requires_membership("moderator")\ndef moderate_washingmachine():\n    if len(request.post_vars) > 0:\n        for key, value in request.post_vars.iteritems():   \n            (field_name,sep,row_id) = key.partition(\'_row_\') #name looks like home_state_row_99\n            if row_id:\n                db(db.washingmachine).update(**{field_name:value})\n    db.washingmachine.status.represent = lambda value,row:  options_widget(db.washingmachine.status,value,\n                     **{\'_name\':\'status_row_%s\' % row.id})\n    grid = SQLFORM.grid(db.washingmachine.status!=\'approved\',orderby=~db.washingmachine.created_on,create=False,editable=False,selectable= lambda ids : redirect(URL(\'default\',\'editable_grid\',vars=request._get_vars)))\n    grid.elements(_type=\'checkbox\',_name=\'records\',replace=None)\n    return dict(grid=grid)\n@auth.requires_membership("moderator")\ndef moderate_others():\n    if len(request.post_vars) > 0:\n        for key, value in request.post_vars.iteritems():   \n            (field_name,sep,row_id) = key.partition(\'_row_\') #name looks like home_state_row_99\n            if row_id:\n                db(db.other).update(**{field_name:value})\n    db.other.status.represent = lambda value,row:  options_widget(db.other.status,value,\n                     **{\'_name\':\'status_row_%s\' % row.id})\n    grid = SQLFORM.grid(db.other.status!=\'approved\',orderby=~db.other.created_on,create=False,editable=False,selectable= lambda ids : redirect(URL(\'default\',\'editable_grid\',vars=request._get_vars)))\n    grid.elements(_type=\'checkbox\',_name=\'records\',replace=None)\n    return dict(grid=grid)\n\n\ndef solve():\n    return locals()\n\ndef display():\n    if len(request.post_vars) > 0:\n        for key, value in request.post_vars.iteritems():\n            (field_name,sep,row_id) = key.partition(\'_row_\') #name looks like home_state_row_99\n            if row_id:\n                db(db.electrical).update(**{field_name:value})\n    db.electrical.progress.represent = lambda value,row:  options_widget(db.electrical.progress,value,\n                     **{\'_name\':\'progress_row_%s\' % row.id})\n    grid = SQLFORM.grid(((db.electrical.status==\'approved\')&(db.electrical.progress!=\'solved\')),orderby=~db.electrical.created_on,create=False,details=False,editable=False,deletable=False,selectable= lambda ids : redirect(URL(\'default\',\'display\',vars=request._get_vars)))\n    grid.elements(_type=\'checkbox\',_name=\'records\',replace=None)\n    return dict(grid=grid)\n\n@auth.requires_membership("solver")\n\ndef solve_electrical():\n    if len(request.post_vars) > 0:\n        for key, value in request.post_vars.iteritems():\n            (field_name,sep,row_id) = key.partition(\'_row_\') #name looks like home_state_row_99\n            if row_id:\n                db(db.electrical).update(**{field_name:value})\n    db.electrical.progress.represent = lambda value,row:  options_widget(db.electrical.progress,value,\n                     **{\'_name\':\'progress_row_%s\' % row.id})\n    grid = SQLFORM.grid(((db.electrical.status==\'approved\')&(db.electrical.progress!=\'solved\')),orderby=~db.electrical.created_on,create=False,editable=False,deletable=False,selectable= lambda ids : redirect(URL(\'default\',\'display\',vars=request._get_vars)))\n    grid.elements(_type=\'checkbox\',_name=\'records\',replace=None)\n    return dict(grid=grid)\n\n\ndef solve_plumbing():\n    if len(request.post_vars) > 0:\n        for key, value in request.post_vars.iteritems():\n            (field_name,sep,row_id) = key.partition(\'_row_\') #name looks like home_state_row_99\n            if row_id:\n                db(db.water).update(**{field_name:value})\n    db.water.progress.represent = lambda value,row:  options_widget(db.water.progress,value,\n                     **{\'_name\':\'progress_row_%s\' % row.id})\n    grid = SQLFORM.grid(((db.water.status==\'approved\')&(db.water.progress!=\'solved\')),orderby=~db.water.created_on,create=False,editable=False,deletable=False,selectable= lambda ids : redirect(URL(\'default\',\'display\',vars=request._get_vars)))\n    grid.elements(_type=\'checkbox\',_name=\'records\',replace=None)\n    return dict(grid=grid)\n\n\n\n\n\ndef solve_washingmachine():\n    if len(request.post_vars) > 0:\n        for key, value in request.post_vars.iteritems():\n            (field_name,sep,row_id) = key.partition(\'_row_\') #name looks like home_state_row_99\n            if row_id:\n                db(db.washingmachine).update(**{field_name:value})\n    db.washingmachine.progress.represent = lambda value,row:  options_widget(db.washingmachine.progress,value,\n                     **{\'_name\':\'progress_row_%s\' % row.id})\n    grid = SQLFORM.grid(((db.washingmachine.status==\'approved\')&(db.washingmachine.progress!=\'solved\')),orderby=~db.washingmachine.created_on,create=False,editable=False,deletable=False,selectable= lambda ids : redirect(URL(\'default\',\'display\',vars=request._get_vars)))\n    grid.elements(_type=\'checkbox\',_name=\'records\',replace=None)\n    return dict(grid=grid)\n\n\n\ndef solve_others():\n    if len(request.post_vars) > 0:\n        for key, value in request.post_vars.iteritems():\n            (field_name,sep,row_id) = key.partition(\'_row_\') #name looks like home_state_row_99\n            if row_id:\n                db(db.other).update(**{field_name:value})\n    db.other.progress.represent = lambda value,row:  options_widget(db.other.progress,value,\n                     **{\'_name\':\'progress_row_%s\' % row.id})\n    grid = SQLFORM.grid(((db.other.status==\'approved\')&(db.other.progress!=\'solved\')),orderby=~db.other.created_on,create=False,editable=False,deletable=False,selectable= lambda ids : redirect(URL(\'default\',\'display\',vars=request._get_vars)))\n    grid.elements(_type=\'checkbox\',_name=\'records\',replace=None)\n    return dict(grid=grid)\n\n\n\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(user)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ramarohit/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/ramarohit/web2py/applications/test/controllers/default.py", line 289, in <module>\n  File "/home/ramarohit/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ramarohit/web2py/applications/test/controllers/default.py", line 268, in user\n    return dict(form=auth())\n  File "/home/ramarohit/web2py/gluon/tools.py", line 1923, in __call__\n    return getattr(self, args[0])()\n  File "/home/ramarohit/web2py/gluon/tools.py", line 3231, in logout\n    self.log_event(log, self.user)\n  File "/home/ramarohit/web2py/gluon/tools.py", line 2521, in log_event\n    origin=origin, user_id=user_id)\n  File "/home/ramarohit/web2py/gluon/packages/dal/pydal/objects.py", line 731, in insert\n    ret = self._db._adapter.insert(self, self._listify(fields))\n  File "/home/ramarohit/web2py/gluon/packages/dal/pydal/adapters/base.py", line 746, in insert\n    raise e\nIntegrityError: FOREIGN KEY constraint failed\n'
p11
s.